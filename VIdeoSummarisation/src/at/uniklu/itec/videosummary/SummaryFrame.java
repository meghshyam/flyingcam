/*
 * SummaryFrame.java
 *
 * Created on 25. September 2008, 14:50
 */
package at.uniklu.itec.videosummary;

import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import net.semanticmetadata.lire.imageanalysis.AutoColorCorrelogram;
import net.semanticmetadata.lire.imageanalysis.CEDD;
import net.semanticmetadata.lire.imageanalysis.ColorLayout;
import net.semanticmetadata.lire.imageanalysis.EdgeHistogram;
import net.semanticmetadata.lire.imageanalysis.FCTH;
import net.semanticmetadata.lire.imageanalysis.Gabor;
import net.semanticmetadata.lire.imageanalysis.ScalableColor;
import net.semanticmetadata.lire.imageanalysis.SimpleColorHistogram;
import net.semanticmetadata.lire.imageanalysis.Tamura;

/**
 * A video summary generator based on FFMPEG.
 * Date: 11.07.2008
 * Time: 10:38:58
 * (c) 2008 Mathias Lux, Klaus Schoeffmann & Markus Waltl, ITEC, Klagenfurt University
 *
 * This source code is licensed under GPL. That means it is is free software;
 * you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * The code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this programm; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * @author Mathias Lux, mathias@juggle.at
 * @author Markus Waltl
 */
public class SummaryFrame extends javax.swing.JFrame {

    /** Creates new form SummaryFrame */
    public SummaryFrame() {
        try {
            setIconImage(ImageIO.read(getClass().getResource("gkrellm2.png")));
        } catch (IOException ex) {
            Logger.getLogger(SummaryFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        DropTarget t = new DropTarget(this, new DropTargetListener() {

            public void dragEnter(DropTargetDragEvent dtde) {
            }

            public void dragOver(DropTargetDragEvent dtde) {
            }

            public void dropActionChanged(DropTargetDragEvent dtde) {
            }

            public void dragExit(DropTargetEvent dte) {
            }

            public void drop(DropTargetDropEvent dtde) {
                try {
                    Transferable tr = dtde.getTransferable();
                    DataFlavor[] flavors = tr.getTransferDataFlavors();
                    for (int i = 0; i < flavors.length; i++) {
                        System.out.println("Possible flavor: " + flavors[i].getMimeType());
                        if (flavors[i].isFlavorJavaFileListType()) {
                            dtde.acceptDrop(DnDConstants.ACTION_COPY_OR_MOVE);
                            java.util.List list = (java.util.List) tr.getTransferData(flavors[i]);
                            final LinkedList<Thread> threads = new LinkedList<Thread>();
                            for (Object o : list) {
                                threads.add(summarize(o.toString()));
                            }
                            Thread master = new Thread(new Runnable() {

                                public void run() {
                                    for (Thread t : threads) {
                                        t.run();
                                    }
                                }
                            });
                            master.start();
                            dtde.dropComplete(true);
                            return;
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        numberOfImages = new javax.swing.JComboBox();
        fastModeCheckbox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        mainLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jLabel3 = new javax.swing.JLabel();
        featureSelection = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        fileMenuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        outputImages = new javax.swing.JCheckBoxMenuItem();
        outputStrip = new javax.swing.JCheckBoxMenuItem();
        outputClustervis = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        helpMenuAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Video Summary");

        numberOfImages.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "3", "5", "7", "9", "11", "13", "15", "17", "19", "21" }));
        numberOfImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfImagesActionPerformed(evt);
            }
        });

        fastModeCheckbox.setText("Fast Mode");
        fastModeCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastModeCheckboxActionPerformed(evt);
            }
        });

        jLabel1.setText("Frames #:");

        mainLabel.setFont(new java.awt.Font("Tahoma", 1, 24));
        mainLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        mainLabel.setText("Drop video file/s here ...");

        progressBar.setString("");
        progressBar.setStringPainted(true);

        jLabel3.setText("Descriptor:");

        featureSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CEDD", "FCTH", "Tamura", "Gabor", "ACC", "Color Layout", "Scalable Color", "Edge Histogram", "Color Histogram (L2)", "Color Histogram (JD)" }));
        featureSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                featureSelectionActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        fileMenuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        fileMenuExit.setText("Exit");
        fileMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuExitActionPerformed(evt);
            }
        });
        jMenu1.add(fileMenuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Output");

        outputImages.setSelected(true);
        outputImages.setText("Images");
        outputImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputImagesActionPerformed(evt);
            }
        });
        jMenu2.add(outputImages);

        outputStrip.setSelected(true);
        outputStrip.setText("Image Strip");
        outputStrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputStripActionPerformed(evt);
            }
        });
        jMenu2.add(outputStrip);

        outputClustervis.setSelected(true);
        outputClustervis.setText("Cluster Visualization");
        outputClustervis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputClustervisActionPerformed(evt);
            }
        });
        jMenu2.add(outputClustervis);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        helpMenuAbout.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        helpMenuAbout.setText("About");
        helpMenuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuAboutActionPerformed(evt);
            }
        });
        jMenu3.add(helpMenuAbout);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mainLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(numberOfImages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(featureSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fastModeCheckbox))
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(numberOfImages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(featureSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fastModeCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addGap(7, 7, 7)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void fastModeCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastModeCheckboxActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_fastModeCheckboxActionPerformed

private void numberOfImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfImagesActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_numberOfImagesActionPerformed

private void helpMenuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuAboutActionPerformed
    JOptionPane.showMessageDialog(this, "Video Summaries .... \n(c) 2008 by Mathias Lux & Klaus Schöffmann\nITEC, Klagenfurt University");
}//GEN-LAST:event_helpMenuAboutActionPerformed

private void fileMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuExitActionPerformed
    System.exit(0);
}//GEN-LAST:event_fileMenuExitActionPerformed

private void outputImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputImagesActionPerformed
    Summarize.outputSummaryFrames = outputImages.isSelected();
}//GEN-LAST:event_outputImagesActionPerformed

private void outputStripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputStripActionPerformed
    Summarize.outputStripe = outputStrip.isSelected();
}//GEN-LAST:event_outputStripActionPerformed

private void outputClustervisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputClustervisActionPerformed
    Summarize.paintClusterDistribution = outputClustervis.isSelected();
}//GEN-LAST:event_outputClustervisActionPerformed

private void featureSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_featureSelectionActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_featureSelectionActionPerformed

    private Thread summarize(final String file) {
            String outfile = new File(file).getName();
            if (outfile.contains(".")) outfile = outfile.substring(0, outfile.lastIndexOf("."));
            try {
                outfile = new File(file).getParentFile().getCanonicalPath() + File.separator + outfile;
            } catch (IOException e) {
                e.printStackTrace();
            }
            final String outfile_final = outfile + "_summary.png";
            final String f = featureSelection.getSelectedItem().toString();
            mainLabel.setText("Summarizing " + new File(file).getName());
            final SummaryProgress prog = new SummaryProgress() {

                public void reportProgress(int percent, String message) {
                    progressBar.setString(percent + "% " + message);
                    progressBar.setValue(percent);
                }

                public void setString(String message) {
                    // throw new UnsupportedOperationException("Not supported yet.");
                }

                public void finished() {
                    progressBar.setValue(0);
                    progressBar.setString("");
                    fastModeCheckbox.setEnabled(true);
                    featureSelection.setEnabled(true);
                    numberOfImages.setEnabled(true);
                    mainLabel.setText("Finished");                    
                }


            };
            Thread t = new Thread(new Runnable() {
                public void run() {
                    try {
                        Class feature = CEDD.class;
                        if (f.equals("FCTH")) {
                            feature = FCTH.class;
                        } else if (f.equals("ACC")) {
                            feature = AutoColorCorrelogram.class;
                        } else if (f.equals("Color Layout")) {
                            feature = ColorLayout.class;
                        } else if (f.equals("Tamura")) {
                            feature = Tamura.class;
                        } else if (f.equals("Gabor")) {
                            feature = Gabor.class;
                        } else if (f.equals("Scalable Color")) {
                            feature = ScalableColor.class;
                        } else if (f.equals("Edge Histogram")) {
                            feature = EdgeHistogram.class;
                        } else if (f.equals("Color Histogram (L2)")) {
                            feature = SimpleColorHistogram.class;
                        } else if (f.equals("Color Histogram (JD)")) {
                            feature = SimpleColorHistogram.class;
                            // Todo: Check for static configuration.
                        }
                        mainLabel.setText("Summarizing " + new File(file).getName());
                        fastModeCheckbox.setEnabled(false);
                        featureSelection.setEnabled(false);
                        numberOfImages.setEnabled(false);

                        Summarize s = new Summarize(file, feature, outfile_final, fastModeCheckbox.isSelected(), Integer.parseInt(numberOfImages.getSelectedItem().toString()), prog);
                    } catch (IOException ex) {
                        Logger.getLogger(SummaryFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            });
            return t;
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        boolean lfNotSet=true;
        try {            
            UIManager.setLookAndFeel(
                    "com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
            lfNotSet = false;
        } catch (Exception e) {
            e.printStackTrace();
        } 

        if (lfNotSet) {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception e) {
            }
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SummaryFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox fastModeCheckbox;
    private javax.swing.JComboBox featureSelection;
    private javax.swing.JMenuItem fileMenuExit;
    private javax.swing.JMenuItem helpMenuAbout;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel mainLabel;
    private javax.swing.JComboBox numberOfImages;
    private javax.swing.JCheckBoxMenuItem outputClustervis;
    private javax.swing.JCheckBoxMenuItem outputImages;
    private javax.swing.JCheckBoxMenuItem outputStrip;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables

}
